name: Deploy to GitHub Pages

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build (static export)
        env:
          NEXT_PUBLIC_BASE_PATH: /${{ github.event.repository.name }}
        run: npm run build:static

      - name: Prepare static output folder
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path out | Out-Null
          # Copy Next static assets
          New-Item -ItemType Directory -Force -Path out\_next\static | Out-Null
          Copy-Item -Recurse -Force .next\static\* out\_next\static\
          # Copy prerendered HTML
          Copy-Item -Force .next\server\app\index.html out\index.html
          if (Test-Path .next\server\app\_not-found.html) { Copy-Item -Force .next\server\app\_not-found.html out\404.html }
          # Public assets (images, favicon, etc.)
          if (Test-Path public) { Copy-Item -Recurse -Force public\* out\  -ErrorAction SilentlyContinue }
          # Ensure .nojekyll exists
          if (!(Test-Path out\.nojekyll)) { New-Item -ItemType File -Path out\.nojekyll | Out-Null }

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


